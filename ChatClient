package chat;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;

public class ChatClient extends JFrame {
    private JTextArea chatArea;
    private JTextField chatField;
    private MulticastSocket socket;
    private InetAddress group;
    private String username;

    public static final String GROUP_ADDRESS = "224.0.0.1";
    public static final int PORT = 8888;
    public static final byte[] BUFFER = new byte[4096];

    public ChatClient() {
        setTitle("Group Chat Client");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Hiển thị hộp thoại để nhập username
        username = JOptionPane.showInputDialog(this, "Enter your username:");

        chatArea = new JTextArea();
        chatArea.setEditable(false);
        add(new JScrollPane(chatArea), BorderLayout.CENTER);

        chatField = new JTextField();
        add(chatField, BorderLayout.SOUTH);

        chatField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String message = chatField.getText();
                sendMessage(username + ": " + message); // Gửi kèm username
                chatField.setText("");
            }
        });

        setVisible(true);

        try {
            group = InetAddress.getByName(GROUP_ADDRESS);
            socket = new MulticastSocket(PORT);
            socket.joinGroup(group);
            new Thread(new ReceiveMessageTask()).start();  // Chạy luồng để nhận tin nhắn từ server
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Gửi tin nhắn tới server
    private void sendMessage(String message) {
        try {
            DatagramPacket outPacket = new DatagramPacket(message.getBytes(), message.length(), group, PORT);
            socket.send(outPacket);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Nhận tin nhắn từ server và hiển thị lên giao diện
    private class ReceiveMessageTask implements Runnable {
        @Override
        public void run() {
            while (true) {
                try {
                    DatagramPacket inPacket = new DatagramPacket(BUFFER, BUFFER.length);
                    socket.receive(inPacket);
                    String msg = new String(BUFFER, 0, inPacket.getLength());
                    chatArea.append(msg + "\n");
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        new ChatClient();
    }
}
